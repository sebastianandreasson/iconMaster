{"version":3,"sources":["../../src/style/focus-source.js"],"names":[],"mappings":"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","file":"focus-source.js","sourcesContent":["\n/*\n  add data-focus-source attribute to html element containing \"key\", \"pointer\" or \"script\"\n  depending on the input method used to change focus.\n\n  USAGE:\n    style/focus-source()\n\n    body :focus {\n      outline: 1px solid grey;\n    }\n\n    html[data-focus-source=\"key\"] body :focus {\n      outline: 5px solid red;\n    }\n\n    html[data-focus-source=\"key\"] body :focus {\n      outline: 1px solid blue;\n    }\n\n  NOTE: I don't have a GamePad to test, if you do and you want to\n  implement an observer for https://w3c.github.io/gamepad/ - send a PR!\n\n  Alternate implementation: https://github.com/alice/modality\n*/\n\nimport 'domtokenlist-shim';\nimport shadowFocus from '../event/shadow-focus';\nimport engageInteractionTypeObserver from '../observe/interaction-type';\nimport decorateService from '../util/decorate-service';\n\n// preferring focusin/out because they are synchronous in IE10+11\nconst focusEventName = typeof document !== 'undefined' && ('onfocusin' in document ? 'focusin' : 'focus');\nconst blurEventName = typeof document !== 'undefined' && ('onfocusin' in document ? 'focusout' : 'blur');\n\n// interface to read interaction-type-listener state\nlet interactionTypeHandler;\nlet shadowHandle;\n// keep track of last focus source\nlet current = null;\n// overwrite focus source for use with the every upcoming focus event\nlet lock = null;\n// keep track of ever having used a particular input method to change focus\nconst used = {\n  pointer: false,\n  key: false,\n  script: false,\n  initial: false,\n};\n\nfunction handleFocusEvent(event) {\n  let source = '';\n  if (event.type === focusEventName || event.type === 'shadow-focus') {\n    const interactionType = interactionTypeHandler.get();\n    source = lock\n      || interactionType.pointer && 'pointer'\n      || interactionType.key && 'key'\n      || 'script';\n  } else if (event.type === 'initial') {\n    source = 'initial';\n  }\n\n  document.documentElement.setAttribute('data-focus-source', source);\n\n  if (event.type !== blurEventName) {\n    if (!used[source]) {\n      document.documentElement.classList.add('focus-source-' + source);\n    }\n\n    used[source] = true;\n    current = source;\n  }\n}\n\nfunction getCurrentFocusSource() {\n  return current;\n}\n\nfunction getUsedFocusSource(source) {\n  return used[source];\n}\n\nfunction lockFocusSource(source) {\n  lock = source;\n}\n\nfunction disengage() {\n  // clear dom state\n  handleFocusEvent({type: blurEventName});\n  current = lock = null;\n  Object.keys(used).forEach(function(key) {\n    document.documentElement.classList.remove('focus-source-' + key);\n    used[key] = false;\n  });\n  // kill interaction type identification listener\n  interactionTypeHandler.disengage();\n  // kill shadow-focus event dispatcher\n  shadowHandle && shadowHandle.disengage();\n  document.removeEventListener('shadow-focus', handleFocusEvent, true);\n  document.documentElement.removeEventListener(focusEventName, handleFocusEvent, true);\n  document.documentElement.removeEventListener(blurEventName, handleFocusEvent, true);\n  document.documentElement.removeAttribute('data-focus-source');\n}\n\nfunction engage() {\n  // enable the shadow-focus event dispatcher\n  shadowHandle = shadowFocus();\n  // handlers to modify the focused element\n  document.addEventListener('shadow-focus', handleFocusEvent, true);\n  document.documentElement.addEventListener(focusEventName, handleFocusEvent, true);\n  document.documentElement.addEventListener(blurEventName, handleFocusEvent, true);\n  // enable the interaction type identification observer\n  interactionTypeHandler = engageInteractionTypeObserver();\n  // set up initial dom state\n  handleFocusEvent({type: 'initial'});\n\n  return {\n    used: getUsedFocusSource,\n    current: getCurrentFocusSource,\n    lock: lockFocusSource,\n  };\n}\n\nexport default decorateService({ engage, disengage });\n"]}