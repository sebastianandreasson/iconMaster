{"version":3,"sources":["../../src/when/visible-area.js"],"names":[],"mappings":";;;;;;;;;;;;;;;mBAUe,YAAyC;qEAAJ,EAAE;;QAA7B,OAAO,QAAP,OAAO;QAAE,QAAQ,QAAR,QAAQ;QAAE,IAAI,QAAJ,IAAI;;AAC9C,QAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;AAClC,YAAM,IAAI,SAAS,CAAC,8DAA8D,CAAC,CAAC;KACrF;;AAED,QAAI,OAAO,KAAK,SAAS,EAAE;AACzB,YAAM,IAAI,SAAS,CAAC,kDAAkD,CAAC,CAAC;KACzE;;AAED,QAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAC5B,UAAI,GAAG,CAAC,CAAC;KACV;;AAED,QAAM,OAAO,GAAG,2BAAU,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,QAAI,CAAC,OAAO,EAAE;AACZ,YAAM,IAAI,SAAS,CAAC,kDAAkD,CAAC,CAAC;KACzE;;AAED,QAAI,4BAAU,OAAO,CAAC,IAAI,6BAAY,OAAO,CAAC,IAAI,IAAI,IAAI,QAAQ,CAAC,OAAO,CAAC,KAAK,KAAK,EAAE;;AAErF,aAAO,IAAI,CAAC;KACb;;AAED,QAAI,GAAG,YAAA,CAAC;AACR,QAAM,SAAS,GAAG,SAAZ,SAAS,GAAc;AAC3B,SAAG,IAAI,oBAAoB,CAAC,GAAG,CAAC,CAAC;KAClC,CAAC;;AAEF,QAAM,YAAY,GAAG,SAAf,YAAY,GAAc;AAC9B,UAAI,CAAC,4BAAU,OAAO,CAAC,IAAI,6BAAY,OAAO,CAAC,GAAG,IAAI,IAAI,QAAQ,CAAC,OAAO,CAAC,KAAK,KAAK,EAAE;AACrF,WAAG,GAAG,qBAAqB,CAAC,YAAY,CAAC,CAAC;AAC1C,eAAO;OACR;;AAED,eAAS,EAAE,CAAC;KACb,CAAC;;AAEF,gBAAY,EAAE,CAAC;AACf,WAAO,EAAE,SAAS,EAAT,SAAS,EAAE,CAAC;GACtB","file":"visible-area.js","sourcesContent":["\n/*\n  execute a callback once an element became fully visible in the viewport\n*/\n\nimport '../prototype/window.requestanimationframe';\nimport isVisible from '../is/visible';\nimport visibleArea from '../util/visible-area';\nimport nodeArray from '../util/node-array';\n\nexport default function({context, callback, area} = {}) {\n  if (typeof callback !== 'function') {\n    throw new TypeError('when/visible-area requires options.callback to be a function');\n  }\n\n  if (context === undefined) {\n    throw new TypeError('when/visible-area requires valid options.context');\n  }\n\n  if (typeof area !== 'number') {\n    area = 1;\n  }\n\n  const element = nodeArray(context)[0];\n  if (!element) {\n    throw new TypeError('when/visible-area requires valid options.context');\n  }\n\n  if (isVisible(element) && visibleArea(element) >= area && callback(element) !== false) {\n    // element is already visible, trivial escape\n    return null;\n  }\n\n  let raf;\n  const disengage = function() {\n    raf && cancelAnimationFrame(raf);\n  };\n\n  const runWhenReady = function() {\n    if (!isVisible(element) || visibleArea(element) < area || callback(element) === false) {\n      raf = requestAnimationFrame(runWhenReady);\n      return;\n    }\n\n    disengage();\n  };\n\n  runWhenReady();\n  return { disengage };\n}\n"]}