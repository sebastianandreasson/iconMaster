{"version":3,"sources":["../../src/when/focusable.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;mBAUe,YAAyC;qEAAJ,EAAE;;QAA7B,OAAO,QAAP,OAAO;QAAE,QAAQ,QAAR,QAAQ;QAAE,IAAI,QAAJ,IAAI;;AAC9C,QAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;AAClC,YAAM,IAAI,SAAS,CAAC,2DAA2D,CAAC,CAAC;KAClF;;AAED,QAAI,OAAO,KAAK,SAAS,EAAE;AACzB,YAAM,IAAI,SAAS,CAAC,+CAA+C,CAAC,CAAC;KACtE;;AAED,QAAM,OAAO,GAAG,2BAAU,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,QAAM,SAAS,GAAG,6BAAY,OAAO,CAAC,CAAC;AACvC,QAAI,CAAC,OAAO,EAAE;AACZ,YAAM,IAAI,SAAS,CAAC,+CAA+C,CAAC,CAAC;KACtE;;AAED,QAAM,cAAc,GAAG,SAAjB,cAAc,CAAY,MAAM,EAAE;AACtC,UAAI,CAAC,8BAAY,MAAM,CAAC,EAAE;AACxB,eAAO,KAAK,CAAC;OACd;;AAED,aAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;KACzB,CAAC;;AAEF,QAAM,MAAM,GAAG,iCAAgB,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,IAAI,EAAJ,IAAI,EAAE,CAAC,CAAC;AACrF,QAAM,SAAS,GAAG,SAAZ,SAAS,GAAc;AAC3B,eAAS,CAAC,mBAAmB,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;AACxD,YAAM,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;KAC9B,CAAC;;AAEF,aAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;;AAErD,WAAO,EAAE,SAAS,EAAT,SAAS,EAAE,CAAC;GACtB","file":"focusable.js","sourcesContent":["\n/*\n  trigger a callback once the context element is focusable and is fully visible in the viewport\n*/\n\nimport whenVisibleArea from './visible-area';\nimport isFocusable from '../is/focusable';\nimport getDocument from '../util/get-document';\nimport nodeArray from '../util/node-array';\n\nexport default function({context, callback, area} = {}) {\n  if (typeof callback !== 'function') {\n    throw new TypeError('when/focusable requires options.callback to be a function');\n  }\n\n  if (context === undefined) {\n    throw new TypeError('when/focusable requires valid options.context');\n  }\n\n  const element = nodeArray(context)[0];\n  const _document = getDocument(element);\n  if (!element) {\n    throw new TypeError('when/focusable requires valid options.context');\n  }\n\n  const filterCallback = function(target) {\n    if (!isFocusable(target)) {\n      return false;\n    }\n\n    return callback(target);\n  };\n\n  const handle = whenVisibleArea({ context: element, callback: filterCallback, area });\n  const disengage = function() {\n    _document.removeEventListener('focus', disengage, true);\n    handle && handle.disengage();\n  };\n\n  _document.addEventListener('focus', disengage, true);\n\n  return { disengage };\n}\n"]}