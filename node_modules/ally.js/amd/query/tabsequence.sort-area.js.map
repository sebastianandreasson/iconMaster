{"version":3,"sources":["../../src/query/tabsequence.sort-area.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;MASM,IAAI;AACG,aADP,IAAI,CACI,OAAO,EAAE;4BADjB,IAAI;;AAEN,UAAI,CAAC,SAAS,GAAG,6BAAY,OAAO,CAAC,CAAC;AACtC,UAAI,CAAC,IAAI,GAAG,EAAE,CAAC;KAChB;;iBAJG,IAAI;;aAMG,qBAAC,IAAI,EAAE;AAChB,YAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;;;AAGpB,cAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SACzB;;AAED,eAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;OACxB;;;aAEW,sBAAC,IAAI,EAAE;;;AAGjB,YAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,YAAY,GAAG,4BAAU,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC;AACxF,YAAI,CAAC,GAAG,EAAE;;AAER,iBAAO;SACR;;AAED,YAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,+BAAc,EAAC,OAAO,EAAE,GAAG,EAAC,CAAC,CAAC;OACrD;;;aAEmB,8BAAC,QAAQ,EAAE;;;AAG7B,eAAO,QAAQ,CAAC,MAAM,CAAC,UAAS,OAAO,EAAE;AACvC,cAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;AAChD,cAAI,QAAQ,KAAK,MAAM,EAAE;AACvB,mBAAO,IAAI,CAAC;WACb;;AAED,cAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC;AAC/B,cAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;AACxB,gBAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;WAC1B;;AAED,cAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAClC,iBAAO,KAAK,CAAC;SACd,EAAE,IAAI,CAAC,CAAC;OACV;;;WA7CG,IAAI;;;mBAgDK,UAAS,QAAQ,EAAE,OAAO,EAAE;;;;AAIzC,QAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;AACxD,QAAM,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;;;;AAI/B,QAAM,SAAS,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;;AAEtD,QAAI,CAAC,OAAO,CAAC,MAAM,EAAE;;;AAGnB,aAAO,SAAS,CAAC;KAClB;;AAED,WAAO,iCAAgB;AACrB,UAAI,EAAE,SAAS;AACf,cAAQ,EAAE,OAAO;AACjB,oBAAc,EAAE,wBAAS,KAAK,EAAE;AAC9B,YAAM,IAAI,GAAG,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACnD,eAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;OAC/B;KACF,CAAC,CAAC;GACJ","file":"tabsequence.sort-area.js","sourcesContent":["\n// move <area> elements to the location of the <img> elements that reference them\n\nimport cssEscape from 'css.escape';\nimport 'array.prototype.findindex';\nimport queryTabbable from './tabbable';\nimport mergeInDomOrder from '../util/merge-dom-order';\nimport getDocument from '../util/get-document';\n\nclass Maps {\n  constructor(context) {\n    this._document = getDocument(context);\n    this.maps = {};\n  }\n\n  getAreasFor(name) {\n    if (!this.maps[name]) {\n      // the map is not defined within the context, so we\n      // have to go find it elsewhere in the document\n      this.addMapByName(name);\n    }\n\n    return this.maps[name];\n  }\n\n  addMapByName(name) {\n    // apparently getElementsByName() also considers id attribute in IE & opera\n    // https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByName\n    const map = this._document.querySelector('map[name=\"' + cssEscape(name) + '\"]') || null;\n    if (!map) {\n      // if there is no map, the img[usemap] wasn't doing anything anyway\n      return;\n    }\n\n    this.maps[map.name] = queryTabbable({context: map});\n  }\n\n  extractAreasFromList(elements) {\n    // remove all <area> elements from the elements list,\n    // but put them the map for later retrieval\n    return elements.filter(function(element) {\n      const nodeName = element.nodeName.toLowerCase();\n      if (nodeName !== 'area') {\n        return true;\n      }\n\n      const map = element.parentNode;\n      if (!this.maps[map.name]) {\n        this.maps[map.name] = [];\n      }\n\n      this.maps[map.name].push(element);\n      return false;\n    }, this);\n  }\n}\n\nexport default function(elements, context) {\n  // images - unless they are focusable themselves, likely not\n  // part of the elements list, so we'll have to find them and\n  // sort them into the elements list manually\n  const usemaps = context.querySelectorAll('img[usemap]');\n  const maps = new Maps(context);\n\n  // remove all <area> elements from the elements list,\n  // but put them the map for later retrieval\n  const _elements = maps.extractAreasFromList(elements);\n\n  if (!usemaps.length) {\n    // the context does not contain any <area>s so no need\n    // to replace anything, just remove any maps\n    return _elements;\n  }\n\n  return mergeInDomOrder({\n    list: _elements,\n    elements: usemaps,\n    resolveElement: function(image) {\n      const name = image.getAttribute('usemap').slice(1);\n      return maps.getAreasFor(name);\n    },\n  });\n}\n"]}