{"version":3,"sources":["../../src/util/merge-dom-order.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,WAAS,uBAAuB,CAAC,IAAI,EAAE,MAAM,EAAE;;AAE7C,WAAO,IAAI,CAAC,SAAS,CAAC,UAAS,OAAO,EAAE;AACtC,aAAO,MAAM,CAAC,uBAAuB,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,2BAA2B,CAAC;KACnF,CAAC,CAAC;GACJ;;AAED,WAAS,oBAAoB,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,EAAE;;;AAG5D,QAAM,UAAU,GAAG,EAAE,CAAC;AACtB,YAAQ,CAAC,OAAO,CAAC,UAAS,OAAO,EAAE;AACjC,UAAI,OAAO,GAAG,IAAI,CAAC;AACnB,UAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;;AAEnC,UAAI,MAAM,KAAK,CAAC,CAAC,EAAE;;AAEjB,cAAM,GAAG,uBAAuB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAChD,eAAO,GAAG,KAAK,CAAC;OACjB;;AAED,UAAI,MAAM,KAAK,CAAC,CAAC,EAAE;;;AAGjB,cAAM,GAAG,IAAI,CAAC,MAAM,CAAC;OACtB;;;AAGD,UAAM,UAAU,GAAG,4BAAU,cAAc,GAAG,cAAc,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AACjF,UAAI,CAAC,UAAU,CAAC,MAAM,EAAE;;AAEtB,eAAO;OACR;;AAED,gBAAU,CAAC,IAAI,CAAC;AACd,cAAM,EAAN,MAAM;AACN,eAAO,EAAP,OAAO;AACP,gBAAQ,EAAE,UAAU;OACrB,CAAC,CAAC;KACJ,CAAC,CAAC;;AAEH,WAAO,UAAU,CAAC;GACnB;;AAED,WAAS,uBAAuB,CAAC,IAAI,EAAE,UAAU,EAAE;;;AAGjD,QAAI,QAAQ,GAAG,CAAC,CAAC;;;AAGjB,cAAU,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;aAAK,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM;KAAA,CAAC,CAAC;AAC/C,cAAU,CAAC,OAAO,CAAC,UAAS,SAAS,EAAE;;AAErC,UAAM,MAAM,GAAG,SAAS,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;AACzC,UAAM,IAAI,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,QAAQ,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AAC9E,UAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC9B,cAAQ,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;KAChD,CAAC,CAAC;GACJ;;mBAEc,YAAgD;qEAAJ,EAAE;;QAApC,IAAI,QAAJ,IAAI;QAAE,QAAQ,QAAR,QAAQ;QAAE,cAAc,QAAd,cAAc;;;AAErD,QAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;AAE5B,QAAM,SAAS,GAAG,4BAAU,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC/C,mCAAa,SAAS,CAAC,CAAC;;;AAGxB,QAAM,UAAU,GAAG,oBAAoB,CAAC,KAAK,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;;AAE1E,2BAAuB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;AAC3C,WAAO,KAAK,CAAC;GACd","file":"merge-dom-order.js","sourcesContent":["\n// sort a list of elements into another list of elements in DOM order\n\n/*\n  USAGE:\n    mergeDomOrder({\n      // DOM ordered array of elements to use as base of merge\n      list: [],\n      // unordered array of elements to merge into base list\n      elements: [],\n      // callback function to resolve an element\n      resolveElement: function(element) {\n        // return null to skip\n        // return element to replace insertion\n        // return [element1, element2, â€¦] to replace insertion with multiple elements\n        return element;\n      },\n    })\n*/\n\nimport nodeArray from './node-array';\nimport sortDomOrder from './sort-dom-order';\n\nfunction getFirstSuccessorOffset(list, target) {\n  // find the first element that comes AFTER the target element\n  return list.findIndex(function(element) {\n    return target.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_FOLLOWING;\n  });\n}\n\nfunction findInsertionOffsets(list, elements, resolveElement) {\n  // instead of mutating the elements list directly, remember position and map\n  // to inject later, when we can do this more efficiently\n  const insertions = [];\n  elements.forEach(function(element) {\n    let replace = true;\n    let offset = list.indexOf(element);\n\n    if (offset === -1) {\n      // element is not in target list\n      offset = getFirstSuccessorOffset(list, element);\n      replace = false;\n    }\n\n    if (offset === -1) {\n      // there is no successor in the tabsequence,\n      // meaning the image must be the last element\n      offset = list.length;\n    }\n\n    // allow the consumer to replace the injected element\n    const injections = nodeArray(resolveElement ? resolveElement(element) : element);\n    if (!injections.length) {\n      // we can't inject zero elements\n      return;\n    }\n\n    insertions.push({\n      offset,\n      replace,\n      elements: injections,\n    });\n  });\n\n  return insertions;\n}\n\nfunction insertElementsAtOffsets(list, insertions) {\n  // remember the number of elements we have already injected\n  // so we account for the caused index offset\n  let inserted = 0;\n  // make sure that we insert the elements in sequence,\n  // otherwise the offset compensation won't work\n  insertions.sort((a, b) => a.offset - b.offset);\n  insertions.forEach(function(insertion) {\n    // array.splice has an annoying function signature :(\n    const remove = insertion.replace ? 1 : 0;\n    const args = [insertion.offset + inserted, remove].concat(insertion.elements);\n    list.splice.apply(list, args);\n    inserted += insertion.elements.length - remove;\n  });\n}\n\nexport default function({list, elements, resolveElement} = {}) {\n  // operate on a copy so we don't mutate the original array\n  const _list = list.slice(0);\n  // make sure the elements we're injecting are provided in DOM order\n  const _elements = nodeArray(elements).slice(0);\n  sortDomOrder(_elements);\n  // find the offsets within the target array (list) at which to inject\n  // each individual element (from elements)\n  const insertions = findInsertionOffsets(_list, _elements, resolveElement);\n  // actually inject the elements into the target array at the identified positions\n  insertElementsAtOffsets(_list, insertions);\n  return _list;\n}\n"]}