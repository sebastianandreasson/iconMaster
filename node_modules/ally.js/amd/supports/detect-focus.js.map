{"version":3,"sources":["../../src/supports/detect-focus.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAUA,WAAS,WAAW,CAAC,OAAO,EAAE;;;AAG5B,QAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAC9C,WAAO,CAAC,YAAY,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;AACzC,WAAO,CAAC,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;AAC1C,WAAO,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;AAC5C,YAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;;AAEnC,QAAM,OAAO,GAAG,OAAO,OAAO,CAAC,OAAO,KAAK,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;;AAElH,QAAM,KAAK,GAAG,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,OAAO,CAAC;;AAE5E,KAAC,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;;AAEpD,QAAM,qBAAqB,GAAG,QAAQ,CAAC,aAAa,CAAC;;AAErD,QAAM,iBAAiB,GAAG,MAAM,CAAC,SAAS,CAAC;AAC3C,QAAM,kBAAkB,GAAG,MAAM,CAAC,UAAU,CAAC;;AAE7C,SAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;;AAE7B,QAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC,aAAa,KAAK,KAAK,CAAC;;;AAGpG,YAAQ,CAAC,aAAa,IAAI,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;AACxD,yBAAqB,IAAI,qBAAqB,CAAC,KAAK,EAAE,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;AAChF,YAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;;AAEnC,UAAM,CAAC,SAAS,KAAK,iBAAiB,KAAK,MAAM,CAAC,SAAS,GAAG,iBAAiB,CAAA,AAAC,CAAC;AACjF,UAAM,CAAC,UAAU,KAAK,kBAAkB,KAAK,MAAM,CAAC,UAAU,GAAG,kBAAkB,CAAA,AAAC,CAAC;AACrF,WAAO,WAAW,CAAC;GACpB;;;;;mBAIc,UAAS,OAAO,EAAE;AAC/B,QAAI,KAAK,GAAG,kBAAM,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACpC,QAAI,OAAO,KAAK,KAAK,SAAS,EAAE;AAC9B,WAAK,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;AAC7B,wBAAM,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;KAChC;;AAED,WAAO,KAAK,CAAC;GACd","file":"detect-focus.js","sourcesContent":["\nimport cache from './supports-cache';\n\n// options.element:\n//  {string} element name\n// options.mutate: (optional)\n//  {function} callback(element, wrapper) to manipulate element prior to focus-test.\n//             Can return DOMElement to define focus target (default: element)\n// options.validate: (optional)\n//  {function} callback(element) to manipulate test-result\nfunction detectFocus(options) {\n  // wrap tests in an element hidden from screen readers to prevent them\n  // from announcing focus, which can be quite irritating to the user\n  const wrapper = document.createElement('div');\n  wrapper.setAttribute('aria-live', 'off');\n  wrapper.setAttribute('aria-busy', 'true');\n  wrapper.setAttribute('aria-hidden', 'true');\n  document.body.appendChild(wrapper);\n  // create dummy element to test focusability of\n  const element = typeof options.element === 'string' ? document.createElement(options.element) : options.element();\n  // allow callback to further specify dummy element\n  const focus = options.mutate && options.mutate(element, wrapper) || element;\n  // element needs to be part of the DOM to be focusable\n  !element.parentNode && wrapper.appendChild(element);\n  // remember what had focus to restore after test\n  const previousActiveElement = document.activeElement;\n  // remember scroll positions to restore after test\n  const previousScrollTop = window.scrollTop;\n  const previousScrollLeft = window.scrollLeft;\n  // test if the element with invalid tabindex can be focused\n  focus.focus && focus.focus();\n  // validate test's result\n  const allowsFocus = options.validate ? options.validate(element) : document.activeElement === focus;\n  // restore focus to what it was before test and cleanup\n  // IE10 does not redirect focus to <body> when the activeElement is removed\n  document.activeElement && document.activeElement.blur();\n  previousActiveElement && previousActiveElement.focus() || document.body.focus();\n  document.body.removeChild(wrapper);\n  // restore scroll position\n  window.scrollTop !== previousScrollTop && (window.scrollTop = previousScrollTop);\n  window.scrollLeft !== previousScrollLeft && (window.scrollLeft = previousScrollLeft);\n  return allowsFocus;\n}\n\n// cache detected support so we don't have to bother screen readers with unstoppable focus changes\n// and flood the console with net::ERR_INVALID_URL errors for audio/video tests\nexport default function(options) {\n  let value = cache.get(options.name);\n  if (typeof value !== 'boolean') {\n    value = detectFocus(options);\n    cache.set(options.name, value);\n  }\n\n  return value;\n}\n"]}