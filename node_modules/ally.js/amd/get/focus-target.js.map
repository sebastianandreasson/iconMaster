{"version":3,"sources":["../../src/get/focus-target.js"],"names":[],"mappings":";;;;;;;;;;;;;;;mBAUe,YAAyB;qEAAJ,EAAE;;QAAb,OAAO,QAAP,OAAO;;AAC9B,QAAM,OAAO,GAAG,kCAAiB;AAC/B,aAAO,EAAE,iDAAiD;AAC1D,aAAO,EAAP,OAAO;KACR,CAAC,CAAC;;;AAGH,QAAI,8BAAY,OAAO,CAAC,EAAE;AACxB,aAAO,OAAO,CAAC;KAChB;;;AAGD,QAAM,KAAK,GAAG,6BAAW,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;AAEtD,QAAM,oBAAoB,GAAG,KAAK,CAAC,SAAS,0BAAa,CAAC;AAC1D,WAAO,KAAK,CAAC,oBAAoB,CAAC,IAAI,IAAI,CAAC;GAC5C","file":"focus-target.js","sourcesContent":["\n/*\n  Identify the first focusable element in the element's ancestry, including itself\n*/\n\nimport 'array.prototype.findindex';\nimport getParents from '../get/parents';\nimport isFocusable from '../is/focusable';\nimport contextToElement from '../util/context-to-element';\n\nexport default function({context} = {}) {\n  const element = contextToElement({\n    message: 'get/focus-target requires valid options.context',\n    context,\n  });\n\n  // trivial ejection check\n  if (isFocusable(element)) {\n    return element;\n  }\n\n  // obtain the element's ancestry\n  const _path = getParents({context: element}).slice(1);\n  // find the first element that is actually focusable\n  const _firstFocusableIndex = _path.findIndex(isFocusable);\n  return _path[_firstFocusableIndex] || null;\n}\n"]}