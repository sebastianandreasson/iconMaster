{"version":3,"sources":["../../src/fix/pointer-focus-parent.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,MAAI,MAAM,YAAA,CAAC;AACX,MAAI,SAAS,YAAA,CAAC;;AAEd,MAAM,wBAAwB,GAAG,sBAAS,MAAM,KAAK,QAAQ,CAAC;;AAE9D,MAAI,CAAC,wBAAwB,EAAE;AAC7B,UAAM,GAAG,YAAW,EAAE,CAAC;GACxB,MAAM;;;;;;AAKL,UAAM,sBAAsB,GAAG,SAAzB,sBAAsB,CAAY,KAAK,EAAE;;AAE7C,YAAM,MAAM,GAAG,iCAAe,EAAC,OAAO,EAAE,KAAK,CAAC,MAAM,EAAC,CAAC,CAAC;AACvD,YAAI,CAAC,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,iCAAgB,MAAM,CAAC,EAAE;;AAEzE,iBAAO;SACR;;;AAGD,cAAM,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;;;AAGnC,SAAC,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,UAAU,CAAA,CAAE,YAAW;AACpD,gBAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;SACpC,EAAE,CAAC,CAAC,CAAC;OACP,CAAC;;AAEF,YAAM,GAAG,UAAS,OAAO,EAAE;AACzB,eAAO,CAAC,gBAAgB,CAAC,WAAW,EAAE,sBAAsB,EAAE,IAAI,CAAC,CAAC;AACpE,eAAO,CAAC,gBAAgB,CAAC,YAAY,EAAE,sBAAsB,EAAE,IAAI,CAAC,CAAC;OACtE,CAAC;;AAEF,eAAS,GAAG,UAAS,OAAO,EAAE;AAC5B,eAAO,CAAC,mBAAmB,CAAC,WAAW,EAAE,sBAAsB,EAAE,IAAI,CAAC,CAAC;AACvE,eAAO,CAAC,mBAAmB,CAAC,YAAY,EAAE,sBAAsB,EAAE,IAAI,CAAC,CAAC;OACzE,CAAC;;GACH;;mBAEc,iCAAgB,EAAE,MAAM,EAAN,MAAM,EAAE,SAAS,EAAT,SAAS,EAAE,CAAC","file":"pointer-focus-parent.js","sourcesContent":["/*\n  Clicking on a link that has a focusable element in its ancestry [tabindex=\"-1\"],\n  can lead to that parental element gaining focus, instead of the link.\n\n  Example:\n    <div tabindex=\"-1\">\n      <a href=\"#foo\">click me</a>\n    </div>\n\n  This (wrong) behavior was observed in Chrome 38, iOS8, Safari 6.2, WebKit r175131\n  It is not a problem in Firefox 33, Internet Explorer 11, Chrome 39.\n*/\n\nimport platform from 'platform';\nimport getFocusTarget from '../get/focus-target';\nimport isValidTabIndex from '../is/valid-tabindex';\nimport decorateContext from '../util/decorate-context';\n\nlet engage;\nlet disengage;\n// This fix is only relevant to WebKit\nconst relevantToCurrentBrowser = platform.layout === 'WebKit';\n\nif (!relevantToCurrentBrowser) {\n  engage = function() {};\n} else {\n  // add [tabindex=\"0\"] to the (focusable) element that is about to be clicked\n  // if it does not already have an explicit tabindex (attribute).\n  // By applying an explicit tabindex, WebKit will not go look for\n  // the first valid tabindex in the element's parents.\n  const handleBeforeFocusEvent = function(event) {\n    // find the element that would receive focus\n    const target = getFocusTarget({context: event.target});\n    if (!target || target.hasAttribute('tabindex') && isValidTabIndex(target)) {\n      // there's nothing to focus, or the element already has tabindex, we're good\n      return;\n    }\n\n    // assign explicit tabindex, as implicit tabindex is the problem\n    target.setAttribute('tabindex', 0);\n\n    // add cleanup to the RunLoop\n    (window.setImmediate || window.setTimeout)(function() {\n      target.removeAttribute('tabindex');\n    }, 0);\n  };\n\n  engage = function(element) {\n    element.addEventListener('mousedown', handleBeforeFocusEvent, true);\n    element.addEventListener('touchstart', handleBeforeFocusEvent, true);\n  };\n\n  disengage = function(element) {\n    element.removeEventListener('mousedown', handleBeforeFocusEvent, true);\n    element.removeEventListener('touchstart', handleBeforeFocusEvent, true);\n  };\n}\n\nexport default decorateContext({ engage, disengage });\n"]}