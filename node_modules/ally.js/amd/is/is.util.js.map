{"version":3,"sources":["../../src/is/is.util.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAQO,WAAS,oBAAoB,CAAC,KAAK,EAAE;;;AAG1C,QAAM,UAAU,GAAG,KAAK,CAAC,gBAAgB,IAAI,EAAE,CAAC;AAChD,WAAO,OAAO,CAAC,UAAU,IAAI,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;GAClE;;AAEM,WAAS,oBAAoB,CAAC,KAAK,EAAE;AAC1C,WAAO,CACL,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAClC,KAAK,CAAC,gBAAgB,CAAC,YAAY,CAAC,EACpC,KAAK,CAAC,gBAAgB,CAAC,YAAY,CAAC,CACrC,CAAC,IAAI,CAAC,UAAA,QAAQ;aAAI,QAAQ,KAAK,MAAM,IAAI,QAAQ,KAAK,QAAQ;KAAA,CAAC,CAAC;GAClE;;AAEM,WAAS,qBAAqB,CAAC,OAAO,EAAE,QAAQ,EAAE;AACvD,QAAI,QAAQ,KAAK,KAAK,IAAI,QAAQ,KAAK,MAAM,EAAE;;;;AAI7C,aAAO,KAAK,CAAC;KACd;;AAED,WAAO,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;GACjG;;AAEM,WAAS,cAAc,CAAC,OAAO,EAAE;AACtC,QAAM,GAAG,GAAG,OAAO,CAAC,aAAa,CAAC;;AAElC,QAAI,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,KAAK,EAAE;AACrD,aAAO,IAAI,CAAC;KACb;;;;;;;;;;AAUD,QAAM,SAAS,GAAG,6BAAY,OAAO,CAAC,CAAC;AACvC,WAAO,SAAS,CAAC,aAAa,CAAC,eAAe,GAAG,4BAAU,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC;GACtF","file":"is.util.js","sourcesContent":["\n// this is a shared utility file for focus-relevant.js and tabbable.js\n// separate testing of this file's functions is not necessary,\n// as they're implicitly tested by way of the consumers\n\nimport cssEscape from 'css.escape';\nimport getDocument from '../util/get-document';\n\nexport function isUserModifyWritable(style) {\n  // http://www.w3.org/TR/1999/WD-css3-userint-19990916#user-modify\n  // https://github.com/medialize/ally.js/issues/17\n  const userModify = style.webkitUserModify || '';\n  return Boolean(userModify && userModify.indexOf('write') !== -1);\n}\n\nexport function hasCssOverflowScroll(style) {\n  return [\n    style.getPropertyValue('overflow'),\n    style.getPropertyValue('overflow-x'),\n    style.getPropertyValue('overflow-y'),\n  ].some(overflow => overflow === 'auto' || overflow === 'scroll');\n}\n\nexport function isScrollableContainer(element, nodeName) {\n  if (nodeName !== 'div' && nodeName !== 'span') {\n    // Internet Explorer advances scrollable containers and bodies to focusable\n    // only if the scrollable container is <div> or <span> - this does *not*\n    // happen for <section>, <article>, â€¦\n    return false;\n  }\n\n  return element.offsetHeight < element.scrollHeight || element.offsetWidth < element.scrollWidth;\n}\n\nexport function getImageOfArea(element) {\n  const map = element.parentElement;\n\n  if (!map.name || map.nodeName.toLowerCase() !== 'map') {\n    return null;\n  }\n\n  // NOTE: image maps can also be applied to <object> with image content,\n  // but no browser supports this at the moment\n\n  // HTML5 specifies HTMLMapElement.images to be an HTMLCollection of all\n  // <img> and <object> referencing the <map> element, but no browser implements this\n  //   http://www.w3.org/TR/html5/embedded-content-0.html#the-map-element\n  //   https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement\n  // the image must be valid and loaded for the map to take effect\n  const _document = getDocument(element);\n  return _document.querySelector('img[usemap=\"#' + cssEscape(map.name) + '\"]') || null;\n}\n"]}