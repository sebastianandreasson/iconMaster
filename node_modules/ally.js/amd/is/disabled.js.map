{"version":3,"sources":["../../src/is/disabled.js"],"names":[],"mappings":";;;;;;;;;;;AAMA,WAAS,kBAAkB,CAAC,OAAO,EAAE;AACnC,QAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;AAChD,WAAO,QAAQ,KAAK,UAAU,IAAI,OAAO,CAAC,QAAQ,CAAC;GACpD;;mBAEc,UAAS,OAAO,EAAE;AAC/B,QAAI,CAAC,OAAO,IAAI,OAAO,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY,EAAE;AACtD,YAAM,IAAI,SAAS,CAAC,kDAAkD,CAAC,CAAC;KACzE;;AAED,QAAI,OAAO,CAAC,YAAY,CAAC,oBAAoB,CAAC,EAAE;;AAE9C,aAAO,IAAI,CAAC;KACb;;AAED,QAAI,CAAC,2CAA0B,OAAO,CAAC,EAAE;;AAEvC,aAAO,KAAK,CAAC;KACd;;AAED,QAAI,OAAO,CAAC,QAAQ,EAAE;;AAEpB,aAAO,IAAI,CAAC;KACb;;AAED,QAAI,6BAAW,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE;;AAE3D,aAAO,IAAI,CAAC;KACb;;AAED,WAAO,KAAK,CAAC;GACd","file":"disabled.js","sourcesContent":["\n// Determine if an element is disabled (i.e. not editable)\n\nimport getParents from '../get/parents';\nimport isNativeDisabledSupported from './native-disabled-supported';\n\nfunction isDisabledFieldset(element) {\n  const nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'fieldset' && element.disabled;\n}\n\nexport default function(element) {\n  if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n    throw new TypeError('is/disabled requires an argument of type Element');\n  }\n\n  if (element.hasAttribute('data-ally-disabled')) {\n    // treat ally's element/disabled like the DOM native element.disabled\n    return true;\n  }\n\n  if (!isNativeDisabledSupported(element)) {\n    // non-form elements do not support the disabled attribute\n    return false;\n  }\n\n  if (element.disabled) {\n    // the element itself is disabled\n    return true;\n  }\n\n  if (getParents({context: element}).some(isDisabledFieldset)) {\n    // a parental <fieldset> is disabld and inherits the state onto this element\n    return true;\n  }\n\n  return false;\n}\n"]}