{"version":3,"sources":["../../src/is/focus-relevant.js"],"names":[],"mappings":"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","file":"focus-relevant.js","sourcesContent":["\n// determine if an element supports.can be focused by script regardless\n// of the element actually being focusable at the time of execution\n// i.e. <input disabled> is conisdered focus-relevant, but not focusable\n\nimport '../prototype/svgelement.prototype.focus';\nimport polyfillElementPrototypeMatches from '../prototype/element.prototype.matches';\nimport getParents from '../get/parents';\nimport getWindow from '../util/get-window';\nimport isValidTabindex from './valid-tabindex';\nimport isValidArea from './valid-area';\nimport {\n  hasCssOverflowScroll,\n  isScrollableContainer,\n  isUserModifyWritable,\n} from './is.util';\n\nimport _supports from './focus-relevant.supports';\nlet supports;\n\nexport default function(element) {\n  if (!supports) {\n    supports = _supports();\n  }\n\n  if (element === document) {\n    element = document.documentElement;\n  }\n\n  if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n    throw new TypeError('is/focus-relevant requires an argument of type Element');\n  }\n\n  const nodeName = element.nodeName.toLowerCase();\n\n  if (nodeName === 'input' && element.type === 'hidden') {\n    // input[type=\"hidden\"] supports.cannot be focused\n    return false;\n  }\n\n  if (nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea') {\n    return true;\n  }\n\n  if (nodeName === 'label' && !supports.canFocusLabelTabindex) {\n    // <label tabindex=\"0\"> is only tabbable in Firefox, not script-focusable\n    // there's no way to make an element focusable other than by adding a tabindex,\n    // and focus behavior of the label element seems hard-wired to ignore tabindex\n    // in some browsers (like Gecko, Blink and WebKit)\n    return false;\n  }\n\n  if (nodeName === 'area') {\n    return isValidArea(element);\n  }\n\n  if (nodeName === 'a' && element.hasAttribute('href')) {\n    return true;\n  }\n\n  if (nodeName === 'object' && element.hasAttribute('usemap')) {\n    // object[usemap] is not focusable in any browser\n    return false;\n  }\n\n  if (nodeName === 'object') {\n    const svgType = element.getAttribute('type');\n    if (!supports.canFocusObjectSvg && svgType === 'image/svg+xml') {\n      // object[type=\"image/svg+xml\"] is not focusable in Internet Explorer\n      return false;\n    } else if (!supports.canFocusObjectSwf && svgType === 'application/x-shockwave-flash') {\n      // object[type=\"application/x-shockwave-flash\"] is not focusable in Internet Explorer 9\n      return false;\n    }\n  }\n\n  if (nodeName === 'iframe' || nodeName === 'object') {\n    // browsing context containers\n    return true;\n  }\n\n  const validTabindex = isValidTabindex(element);\n\n  if (nodeName === 'embed' || nodeName === 'keygen') {\n    // embed is considered focus-relevant but not focusable\n    // see https://github.com/medialize/ally.js/issues/82\n    return true;\n  }\n\n  if (element.hasAttribute('contenteditable')) {\n    // also see CSS property user-modify below\n    return true;\n  }\n\n  if (nodeName === 'audio' && (supports.canFocusAudioWithoutControls || element.hasAttribute('controls'))) {\n    return true;\n  }\n\n  if (nodeName === 'video' && (supports.canFocusVideoWithoutControls || element.hasAttribute('controls'))) {\n    return true;\n  }\n\n  if (supports.canFocusSummary && nodeName === 'summary') {\n    return true;\n  }\n\n  if (nodeName === 'img' && element.hasAttribute('usemap') && validTabindex) {\n    // Gecko, Trident and Edge do not allow an image with an image map and tabindex to be focused,\n    // it appears the tabindex is overruled so focus is still forwarded to the <map>\n    return supports.canFocusImgUsemapTabindex;\n  }\n\n  if (supports.canFocusTable && (nodeName === 'table' || nodeName === 'td')) {\n    // IE10-11 supports.can focus <table> and <td>\n    return true;\n  }\n\n  if (supports.canFocusFieldset && nodeName === 'fieldset') {\n    // IE10-11 supports.can focus <fieldset>\n    return true;\n  }\n\n  if (nodeName === 'svg') {\n    if (!supports.canFocusSvgMethod) {\n      // Firefox and IE supports.cannot focus SVG elements because SVGElement.prototype.focus is missing\n      return false;\n    }\n    // NOTE: in Chrome this would be something like 'svg, svg *,' as *every* svg element with a focus event listener is focusable\n    return validTabindex;\n  }\n\n  const _window = getWindow(element);\n  polyfillElementPrototypeMatches(_window);\n  if (element.matches('svg a[*|href]')) {\n    // Namespace problems of [xlink:href] explained in http://stackoverflow.com/a/23047888/515124\n    // Firefox supports.cannot focus <svg> child elements from script\n    return supports.canFocusSvgMethod;\n  }\n\n  // http://www.w3.org/TR/html5/editing.html#sequential-focus-navigation-and-the-tabindex-attribute\n  if (validTabindex) {\n    return true;\n  }\n\n  const style = window.getComputedStyle(element, null);\n  if (isUserModifyWritable(style)) {\n    return true;\n  }\n\n  if (supports.canFocusImgIsmap && nodeName === 'img' && element.hasAttribute('ismap')) {\n    // IE10-11 considers the <img> in <a href><img ismap> focusable\n    // https://github.com/medialize/ally.js/issues/20\n    const hasLinkParent = getParents({context: element}).some(\n      parent => parent.nodeName.toLowerCase() === 'a' && parent.hasAttribute('href')\n    );\n\n    if (hasLinkParent) {\n      return true;\n    }\n  }\n\n  // https://github.com/medialize/ally.js/issues/21\n  if (supports.canFocusScrollContainer) {\n    if (supports.canFocusScrollContainerWithoutOverflow) {\n      // Internet Explorer does will consider the scrollable area focusable\n      // if the element is a <div> or a <span> and it is in fact scrollable,\n      // regardless of the CSS overflow property\n      if (isScrollableContainer(element, nodeName)) {\n        return true;\n      }\n    } else if (hasCssOverflowScroll(style)) {\n      // Firefox requires proper overflow setting, IE does not necessarily\n      // https://developer.mozilla.org/en-US/docs/Web/CSS/overflow\n      return true;\n    }\n  }\n\n  const parent = element.parentElement;\n  if (parent) {\n    if (supports.canFocusScrollBody && isScrollableContainer(parent, nodeName)) {\n      // scrollable bodies are focusable Internet Explorer\n      // https://github.com/medialize/ally.js/issues/21\n      return true;\n    }\n\n    // Children of focusable elements with display:flex are focusable in IE10-11\n    if (supports.canFocusChildrenOfFocusableFlexbox) {\n      const parentStyle = window.getComputedStyle(parent, null);\n      if (parentStyle.display.indexOf('flex') > -1) {\n        return true;\n      }\n    }\n  }\n\n  // NOTE: elements marked as inert are not focusable,\n  // but that property is not exposed to the DOM\n  // http://www.w3.org/TR/html5/editing.html#inert\n\n  return false;\n}\n"]}