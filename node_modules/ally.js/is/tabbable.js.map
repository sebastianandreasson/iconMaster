{"version":3,"sources":["../../src/is/tabbable.js"],"names":[],"mappings":"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","file":"tabbable.js","sourcesContent":["\n// determine if an element can be focused by keyboard (i.e. is part of the document's sequential focus navigation order)\n\nimport platform from 'platform';\nimport tabindexValue from '../util/tabindex-value';\nimport {\n  getImageOfArea,\n  hasCssOverflowScroll,\n  isScrollableContainer,\n  isUserModifyWritable,\n} from './is.util';\n\n// Internet Explorer 11 considers fieldset, table, td focusable, but not tabbable\n// Internet Explorer 11 considers body to have [tabindex=0], but does not allow tabbing to it\nconst focusableElementsPattern = /^(fieldset|table|td|body)$/;\n\nexport default function(element) {\n  if (element === document) {\n    element = document.documentElement;\n  }\n\n  if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n    throw new TypeError('is/tabbable requires an argument of type Element');\n  }\n\n  if (platform.name === 'Chrome Mobile' && parseFloat(platform.version) > 42 && platform.os.family === 'Android') {\n    // External keyboard support worked fine in CHrome 42, but stopped working in Chrome 45.\n    // The on-screen keyboard does not provide a way to focus the next input element (like iOS does).\n    // That leaves us with no option to advance focus by keyboard, ergo nothing is tabbable (keyboard focusable).\n    return false;\n  }\n\n  const nodeName = element.nodeName.toLowerCase();\n  const _tabindex = tabindexValue(element);\n  const tabindex = _tabindex === null ? null : _tabindex >= 0;\n\n  // NOTE: Firefox 31 considers [contenteditable] to have [tabindex=-1], but allows tabbing to it\n  // fixed in Firefox 40 the latest - https://bugzilla.mozilla.org/show_bug.cgi?id=1185657\n  if (element.hasAttribute('contenteditable')) {\n    // tabbing can still be disabled by explicitly providing [tabindex=\"-1\"]\n    return tabindex !== false;\n  }\n\n  if (focusableElementsPattern.test(nodeName) && tabindex !== true) {\n    return false;\n  }\n\n  // in Trident and Gecko SVGElement does not know about the tabIndex property\n  if (element.tabIndex === undefined) {\n    return false;\n  }\n\n  if (nodeName === 'audio') {\n    if (!element.hasAttribute('controls')) {\n      // In Internet Explorer the <audio> element is focusable, but not tabbable, and tabIndex property is wrong\n      return false;\n    } else if (platform.name === 'Chrome' || platform.name === 'Chrome Mobile') {\n      // In Chrome <audio controls tabindex=\"-1\"> remains keyboard focusable\n      return true;\n    }\n  }\n\n  if (nodeName === 'video') {\n    if (!element.hasAttribute('controls')) {\n      if (platform.name === 'IE') {\n        // In Internet Explorer the <video> element is focusable, but not tabbable, and tabIndex property is wrong\n        return false;\n      }\n    } else if (platform.name === 'Chrome' || platform.name === 'Firefox') {\n      // In Chrome and Firefox <video controls tabindex=\"-1\"> remains keyboard focusable\n      return true;\n    }\n  }\n\n  if (nodeName === 'object') {\n    if (platform.layout === 'Blink' || platform.layout === 'WebKit') {\n      // In all Blink and WebKit based browsers <embed> and <object> are never keyboard focusable, even with tabindex=\"0\" set\n      return false;\n    }\n  }\n\n  if (platform.name === 'Safari' && parseFloat(platform.version) < 10 && platform.os.family === 'iOS') {\n    // iOS 8 only considers a hand full of elements tabbable (keyboard focusable)\n    // this holds true even with external keyboards\n    let potentiallyTabbable = (nodeName === 'input' && element.type === 'text' || element.type === 'password')\n      || nodeName === 'select'\n      || nodeName === 'textarea'\n      || element.hasAttribute('contenteditable');\n\n    if (!potentiallyTabbable) {\n      const style = window.getComputedStyle(element, null);\n      potentiallyTabbable = isUserModifyWritable(style);\n    }\n\n    if (!potentiallyTabbable) {\n      return false;\n    }\n  }\n\n  if (platform.name === 'Firefox') {\n    // Firefox considers scrollable containers keyboard focusable,\n    // even though their tabIndex property is -1\n    const style = window.getComputedStyle(element, null);\n    if (hasCssOverflowScroll(style)) {\n      // value of tabindex takes precedence\n      return tabindex !== false;\n    }\n  }\n\n  if (platform.name === 'IE') {\n    // IE degrades <area> to script focusable, if the image\n    // using the <map> has been given tabindex=\"-1\"\n    if (nodeName === 'area') {\n      const img = getImageOfArea(element);\n      if (img && tabindexValue(img) < 0) {\n        return false;\n      }\n    }\n\n    const style = window.getComputedStyle(element, null);\n    if (isUserModifyWritable(style)) {\n      // prevent being swallowed by the overzealous isScrollableContainer() below\n      return element.tabIndex >= 0;\n    }\n\n    // IE considers scrollable containers script focusable only,\n    // even though their tabIndex property is 0\n    if (isScrollableContainer(element, nodeName)) {\n      return false;\n    }\n\n    const parent = element.parentNode;\n    // IE considers scrollable bodies script focusable only,\n    if (isScrollableContainer(parent, nodeName)) {\n      return false;\n    }\n\n    // Children of focusable elements with display:flex are focusable in IE10-11,\n    // even though their tabIndex property suggests otherwise\n    const parentStyle = window.getComputedStyle(parent, null);\n    if (parentStyle.display.indexOf('flex') > -1) {\n      return false;\n    }\n  }\n\n  // http://www.w3.org/WAI/PF/aria-practices/#focus_tabindex\n  return element.tabIndex >= 0;\n}\n"]}