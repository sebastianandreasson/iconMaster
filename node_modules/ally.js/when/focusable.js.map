{"version":3,"sources":["../../src/when/focusable.js"],"names":[],"mappings":";;;;;;;;;;;;;2BAK4B,gBAAgB;;;;2BACpB,iBAAiB;;;;+BACjB,sBAAsB;;;;6BACxB,oBAAoB;;;;qBAE3B,YAAyC;mEAAJ,EAAE;;MAA7B,OAAO,QAAP,OAAO;MAAE,QAAQ,QAAR,QAAQ;MAAE,IAAI,QAAJ,IAAI;;AAC9C,MAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;AAClC,UAAM,IAAI,SAAS,CAAC,2DAA2D,CAAC,CAAC;GAClF;;AAED,MAAI,OAAO,KAAK,SAAS,EAAE;AACzB,UAAM,IAAI,SAAS,CAAC,+CAA+C,CAAC,CAAC;GACtE;;AAED,MAAM,OAAO,GAAG,gCAAU,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,MAAM,SAAS,GAAG,kCAAY,OAAO,CAAC,CAAC;AACvC,MAAI,CAAC,OAAO,EAAE;AACZ,UAAM,IAAI,SAAS,CAAC,+CAA+C,CAAC,CAAC;GACtE;;AAED,MAAM,cAAc,GAAG,SAAjB,cAAc,CAAY,MAAM,EAAE;AACtC,QAAI,CAAC,8BAAY,MAAM,CAAC,EAAE;AACxB,aAAO,KAAK,CAAC;KACd;;AAED,WAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;GACzB,CAAC;;AAEF,MAAM,MAAM,GAAG,8BAAgB,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,IAAI,EAAJ,IAAI,EAAE,CAAC,CAAC;AACrF,MAAM,SAAS,GAAG,SAAZ,SAAS,GAAc;AAC3B,aAAS,CAAC,mBAAmB,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;AACxD,UAAM,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;GAC9B,CAAC;;AAEF,WAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;;AAErD,SAAO,EAAE,SAAS,EAAT,SAAS,EAAE,CAAC;CACtB","file":"focusable.js","sourcesContent":["\n/*\n  trigger a callback once the context element is focusable and is fully visible in the viewport\n*/\n\nimport whenVisibleArea from './visible-area';\nimport isFocusable from '../is/focusable';\nimport getDocument from '../util/get-document';\nimport nodeArray from '../util/node-array';\n\nexport default function({context, callback, area} = {}) {\n  if (typeof callback !== 'function') {\n    throw new TypeError('when/focusable requires options.callback to be a function');\n  }\n\n  if (context === undefined) {\n    throw new TypeError('when/focusable requires valid options.context');\n  }\n\n  const element = nodeArray(context)[0];\n  const _document = getDocument(element);\n  if (!element) {\n    throw new TypeError('when/focusable requires valid options.context');\n  }\n\n  const filterCallback = function(target) {\n    if (!isFocusable(target)) {\n      return false;\n    }\n\n    return callback(target);\n  };\n\n  const handle = whenVisibleArea({ context: element, callback: filterCallback, area });\n  const disengage = function() {\n    _document.removeEventListener('focus', disengage, true);\n    handle && handle.disengage();\n  };\n\n  _document.addEventListener('focus', disengage, true);\n\n  return { disengage };\n}\n"]}