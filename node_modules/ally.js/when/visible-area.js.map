{"version":3,"sources":["../../src/when/visible-area.js"],"names":[],"mappings":";;;;;;;;;;;;;QAKO,2CAA2C;;yBAC5B,eAAe;;;;+BACb,sBAAsB;;;;6BACxB,oBAAoB;;;;qBAE3B,YAAyC;mEAAJ,EAAE;;MAA7B,OAAO,QAAP,OAAO;MAAE,QAAQ,QAAR,QAAQ;MAAE,IAAI,QAAJ,IAAI;;AAC9C,MAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;AAClC,UAAM,IAAI,SAAS,CAAC,8DAA8D,CAAC,CAAC;GACrF;;AAED,MAAI,OAAO,KAAK,SAAS,EAAE;AACzB,UAAM,IAAI,SAAS,CAAC,kDAAkD,CAAC,CAAC;GACzE;;AAED,MAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAC5B,QAAI,GAAG,CAAC,CAAC;GACV;;AAED,MAAM,OAAO,GAAG,gCAAU,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,MAAI,CAAC,OAAO,EAAE;AACZ,UAAM,IAAI,SAAS,CAAC,kDAAkD,CAAC,CAAC;GACzE;;AAED,MAAI,4BAAU,OAAO,CAAC,IAAI,kCAAY,OAAO,CAAC,IAAI,IAAI,IAAI,QAAQ,CAAC,OAAO,CAAC,KAAK,KAAK,EAAE;;AAErF,WAAO,IAAI,CAAC;GACb;;AAED,MAAI,GAAG,YAAA,CAAC;AACR,MAAM,SAAS,GAAG,SAAZ,SAAS,GAAc;AAC3B,OAAG,IAAI,oBAAoB,CAAC,GAAG,CAAC,CAAC;GAClC,CAAC;;AAEF,MAAM,YAAY,GAAG,SAAf,YAAY,GAAc;AAC9B,QAAI,CAAC,4BAAU,OAAO,CAAC,IAAI,kCAAY,OAAO,CAAC,GAAG,IAAI,IAAI,QAAQ,CAAC,OAAO,CAAC,KAAK,KAAK,EAAE;AACrF,SAAG,GAAG,qBAAqB,CAAC,YAAY,CAAC,CAAC;AAC1C,aAAO;KACR;;AAED,aAAS,EAAE,CAAC;GACb,CAAC;;AAEF,cAAY,EAAE,CAAC;AACf,SAAO,EAAE,SAAS,EAAT,SAAS,EAAE,CAAC;CACtB","file":"visible-area.js","sourcesContent":["\n/*\n  execute a callback once an element became fully visible in the viewport\n*/\n\nimport '../prototype/window.requestanimationframe';\nimport isVisible from '../is/visible';\nimport visibleArea from '../util/visible-area';\nimport nodeArray from '../util/node-array';\n\nexport default function({context, callback, area} = {}) {\n  if (typeof callback !== 'function') {\n    throw new TypeError('when/visible-area requires options.callback to be a function');\n  }\n\n  if (context === undefined) {\n    throw new TypeError('when/visible-area requires valid options.context');\n  }\n\n  if (typeof area !== 'number') {\n    area = 1;\n  }\n\n  const element = nodeArray(context)[0];\n  if (!element) {\n    throw new TypeError('when/visible-area requires valid options.context');\n  }\n\n  if (isVisible(element) && visibleArea(element) >= area && callback(element) !== false) {\n    // element is already visible, trivial escape\n    return null;\n  }\n\n  let raf;\n  const disengage = function() {\n    raf && cancelAnimationFrame(raf);\n  };\n\n  const runWhenReady = function() {\n    if (!isVisible(element) || visibleArea(element) < area || callback(element) === false) {\n      raf = requestAnimationFrame(runWhenReady);\n      return;\n    }\n\n    disengage();\n  };\n\n  runWhenReady();\n  return { disengage };\n}\n"]}