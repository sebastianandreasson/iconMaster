{"version":3,"sources":["../../src/query/tabsequence.sort-shadowed.js"],"names":[],"mappings":"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","file":"tabsequence.sort-shadowed.js","sourcesContent":["\nimport getShadowHost from '../get/shadow-host';\nimport mergeInDomOrder from '../util/merge-dom-order';\nimport tabindexValue from '../util/tabindex-value';\n\nclass Shadows {\n  constructor(context, sortElements) {\n    // document context we're working with\n    this.context = context;\n    // callback that sorts an array of elements\n    this.sortElements = sortElements;\n    // reference to create unique IDs for each ShadowHost\n    this.hostCounter = 1;\n    // reference map for child-ShadowHosts of a ShadowHost\n    this.inHost = {};\n    // reference map for child-ShadowHost of the document\n    this.inDocument = [];\n    // reference map for ShadowHosts\n    this.hosts = {};\n    // reference map for tabbable elements of a ShadowHost\n    this.elements = {};\n  }\n\n  // remember which hosts we have to sort within later\n  _registerHost(host) {\n    if (host._sortingId) {\n      return;\n    }\n\n    // make the ShadowHost identifiable (see cleanup() for undo)\n    host._sortingId = 'shadow-' + (this.hostCounter++);\n    this.hosts[host._sortingId] = host;\n\n    // hosts may contain other hosts\n    const parentHost = getShadowHost({context: host});\n    if (parentHost) {\n      this._registerHost(parentHost);\n      this._registerHostParent(host, parentHost);\n    } else {\n      this.inDocument.push(host);\n    }\n  }\n\n  // remember which host is the child of which other host\n  _registerHostParent(host, parent) {\n    if (!this.inHost[parent._sortingId]) {\n      this.inHost[parent._sortingId] = [];\n    }\n\n    this.inHost[parent._sortingId].push(host);\n  }\n\n  // remember which elements a host contains\n  _registerElement(element, host) {\n    if (!this.elements[host._sortingId]) {\n      this.elements[host._sortingId] = [];\n    }\n\n    this.elements[host._sortingId].push(element);\n  }\n\n  // remove shadowed elements from the sequence and register\n  // the ShadowHosts they belong to so we know what to sort\n  // later on\n  extractElements(elements) {\n    return elements.filter(function(element) {\n      const host = getShadowHost({context: element });\n      if (!host) {\n        return true;\n      }\n\n      this._registerHost(host);\n      this._registerElement(element, host);\n      return false;\n    }, this);\n  }\n\n  // inject hosts into the sequence, sort everything,\n  // and recoursively replace hosts by its descendants\n  sort(elements) {\n    let _elements = this._injectHosts(elements);\n    _elements = this._replaceHosts(_elements);\n    this._cleanup();\n    return _elements;\n  }\n\n  // merge ShadowHosts into the element lists of other ShadowHosts\n  // or the document, then sort the individual lists\n  _injectHosts(elements) {\n    Object.keys(this.hosts).forEach(function(_sortingId) {\n      const _list = this.elements[_sortingId];\n      const _elements = this.inHost[_sortingId];\n      const _context = this.hosts[_sortingId].shadowRoot;\n      this.elements[_sortingId] = this._merge(_list, _elements, _context);\n    }, this);\n\n    return this._merge(elements, this.inDocument, this.context);\n  }\n\n  _merge(list, elements, context) {\n    const merged = mergeInDomOrder({\n      list,\n      elements,\n    });\n\n    return this.sortElements(merged, context);\n  }\n\n  _replaceHosts(elements) {\n    return mergeInDomOrder({\n      list: elements,\n      elements: this.inDocument,\n      resolveElement: this._resolveHostElement.bind(this),\n    });\n  }\n\n  _resolveHostElement(host) {\n    const merged = mergeInDomOrder({\n      list: this.elements[host._sortingId],\n      elements: this.inHost[host._sortingId],\n      resolveElement: this._resolveHostElement.bind(this),\n    });\n\n    if (tabindexValue(host)) {\n      return [host].concat(merged);\n    }\n\n    return merged;\n  }\n\n  _cleanup() {\n    // remove those identifers we put on the ShadowHost to avoid using Map()\n    Object.keys(this.hosts).forEach(function(key) {\n      delete this.hosts[key]._sortingId;\n    }, this);\n  }\n}\n\nexport default function(elements, context, sortElements) {\n  const shadows = new Shadows(context, sortElements);\n  const _elements = shadows.extractElements(elements);\n\n  if (_elements.length === elements.length) {\n    // no shadowed content found, no need to continue\n    return sortElements(elements);\n  }\n\n  return shadows.sort(_elements);\n}\n"]}