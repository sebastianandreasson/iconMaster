{"version":3,"sources":["../../src/query/first-tabbable.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;QAYO,2BAA2B;;wBACR,YAAY;;;;2BACd,iBAAiB;;;;6BACnB,oBAAoB;;;;AAE1C,SAAS,YAAY,CAAC,OAAO,EAAE;;AAE7B,SAAO,OAAO,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;CAC1C;;AAED,SAAS,qBAAqB,CAAC,OAAO,EAAE;AACtC,SAAO,OAAO,CAAC,QAAQ,IAAI,CAAC,CAAC;CAC9B;;qBAEc,YAAgF;mEAAJ,EAAE;;MAApE,OAAO,QAAP,OAAO;MAAE,QAAQ,QAAR,QAAQ;MAAE,QAAQ,QAAR,QAAQ;MAAE,eAAe,QAAf,eAAe;MAAE,gBAAgB,QAAhB,gBAAgB;;AACrF,MAAI,KAAK,GAAG,CAAC,CAAC,CAAC;;AAEf,MAAI,CAAC,QAAQ,EAAE;AACb,WAAO,GAAG,gCAAU,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,YAAQ,GAAG,2BAAc,EAAE,OAAO,EAAP,OAAO,EAAE,QAAQ,EAAR,QAAQ,EAAE,CAAC,CAAC;GACjD;;AAED,MAAI,QAAQ,CAAC,MAAM,IAAI,CAAC,eAAe,EAAE;;AAEvC,SAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;GAC1C;;AAED,MAAI,QAAQ,CAAC,MAAM,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;;AAEnC,SAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;GACnD;;AAED,MAAI,KAAK,KAAK,CAAC,CAAC,IAAI,gBAAgB,IAAI,OAAO,IAAI,8BAAY,OAAO,CAAC,EAAE;AACvE,WAAO,OAAO,CAAC;GAChB;;AAED,SAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC;CAChC","file":"first-tabbable.js","sourcesContent":["\n/*\n    query/firstTabbable() finds the first suitable element to receive focus in the given context.\n    If an element has [autofocus] return that element, otherwise return the first element\n    in document order that does *not* have a positive tabIndex (e.g. as [tabindex=\"1\"]),\n    otherwise return the context itself, if it is focusable.\n\n    Note: Chrome's <dialog> will focus the first tabbable element, even if it has\n    [tabindex=\"1\"]. Since [tabindex=\"1\"] is considered\n    bad practice we'll ignore it until someone complains.\n */\n\nimport 'array.prototype.findindex';\nimport queryTabbable from './tabbable';\nimport isFocusable from '../is/focusable';\nimport nodeArray from '../util/node-array';\n\nfunction hasAutofocus(element) {\n  // [autofocus] actually only works on form element, but who cares?\n  return element.hasAttribute('autofocus');\n}\n\nfunction hasNoPositiveTabindex(element) {\n  return element.tabIndex <= 0;\n}\n\nexport default function({context, sequence, strategy, ignoreAutofocus, defaultToContext} = {}) {\n  let index = -1;\n\n  if (!sequence) {\n    context = nodeArray(context || document.body)[0];\n    sequence = queryTabbable({ context, strategy });\n  }\n\n  if (sequence.length && !ignoreAutofocus) {\n    // prefer [autofocus]\n    index = sequence.findIndex(hasAutofocus);\n  }\n\n  if (sequence.length && index === -1) {\n    // ignore positive [tabindex]\n    index = sequence.findIndex(hasNoPositiveTabindex);\n  }\n\n  if (index === -1 && defaultToContext && context && isFocusable(context)) {\n    return context;\n  }\n\n  return sequence[index] || null;\n}\n"]}